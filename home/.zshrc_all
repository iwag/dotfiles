############ -*- Mode: shell-script; coding: euc-jp -*- ####
# ~ippei/.zshrc
#   written by ippei.kishida@materials.mbox.media.kyoto-u.ac.jp
# last modified : 2004-08-02
# 修正、改変、再配布何でも可
# cf: man zshall, zshoptions
############################################################
#### 評価用スペース
#autoload -U predict-on # コマンドの予測入力(ヒストリ→一般補完)
#zle -N predict-on
#zle -N predict-off
#bindkey '^Xp' predict-on    # [C-x p] で有効化
#bindkey '^X^p' predict-off  # [C-x C-p] で無効化
#predict-on
# 面白いんだけど、コマンドラインの先頭に戻って編集するときにカーソル以降が全て消えるのが難点

autoload -U zmv
# % zmv '(*).jpeg' '$1.jpg'
# % zmv '(**/)foo(*).jpeg' '$1bar$2.jpg'
# % zmv -n '(**/)foo(*).jpeg' '$1bar$2.jpg' # 実行せずパターン表示のみ
# % zmv '(*)' '${(L)1}; # 大文字→小文字
# % zmv -W '*.c.org' 'org/*.c' #「(*)」「$1」を「*」で済ませられる
alias mmv='noglob zmv -W'  # 引数のクォートも面倒なので
# % mmv *.c.org org/*.c
#zmv -C # 移動ではなくコピー(zcp として使う方法もあるみたいだけど)
#zmv -L # 移動ではなくリンク(zln として使う方法もあるみたいだけど)

zstyle ':completion:*' use-compctl false # compctl形式を使用しない

# デフォルトでもユーザ名は /etc/passwd から、ホスト名は /etc/hosts から> 補完候補を持ってくる
#zstyle ':completion:*' users-hosts bar:foo.example.com funa@daemon
 
############################################################
# tcsh 風味の単語削除
#tcsh-backward-delete-word () {
    #local WORDCHARS="${WORDCHARS:s#/#}"
    #zle backward-delete-word
#}
#zle -N tcsh-backward-delete-word # 関数を widget に変えて
#bindkey '^W' tcsh-backward-delete-word # bindkey で割当てる

# 単語単位でのバックスペース
#export WORDCHARS='*?_.[]~=&;!#$%^(){}<>'
#bindkey "^[h" backward-kill-word

# redo

#     $ bindkey G backward-kill-word
#     "^W" backward-kill-word
#     "^[^H" backward-kill-word
#     "^[^?" backward-kill-word

# メモ
# cd -[tab] でディレクトリスタックを呼び出せる
# <1-20> パターンマッチ
# ESC C-h で区切り文字までのバックスペース
# killallコマンド
# ***/ シムリンクを辿る
# C-x g ワイルドカード展開結果をみる
# a=aiueo; echo $a[1] # 配列の扱い
# setopt multios(デフォルト)で複数リダイレクト、パイプ(「ls > 1.txt > 2.txt | less」)

#### 以下に書かれてないキーバインドは man zshzle の STANDARD WIDGETS を参照
# ESC-q (push-line)ディレクトリスタック
# C-x C-x       (exchange-point-and-mark)C-SPACE でマークした個所にジャンプ
# ESC-T (transpose-words)引数の前後交換
# ESC-. (insert-last-word)直前コマンドの最後の引数を呼び出す(繰り返し使える)、環境変数 _ も同様
# ESC-U (up-case-word)カーソル位置〜単語終端までを大文字に変更
# ESC-L (down-case-word)カーソル位置〜単語終端までを小文字に変更
# ESC-' (quote-line)コマンド行全体を '〜' で括る
# ESC-" (quote-region)マークした位置〜カーソル位置を '〜' で括る
# (未割当て)      (expand-cmd-path)コマンドをフルパスに展開
# C-x C-=       (what-cursor-position)カーソル位置にある文字コードを8、10、16進表示、カーソル位置を表示
# C-[   ESC と等価
# ESC-n (digit-argument)キー入力の回数指定(例：[ESC-4][ESC-0]-)
# ESC C-_       (copy-prev-word)カーソルの左にある単語をコピーしてペーストする
# C-x C-o       (overwrite-mode)挿入←→上書のモード切り替え

# 個人的キーバインドに使える C-キーバインド
# C-o, C-q, C-s
# C-c, C-g は入力中のコマンドが消えてしまうのを何とかする
# C-i   TAB でいい
# C-w   要改良
# C-v   特殊文字を置く。C-v C-i ならタブ文字、C-v C-j なら改行文字を置ける
# C-x 系コマンドを調べる。(C-x g みたいな)
# ■C-t の文字入れかえは使い勝手が良くないのでいらない → screen に使用
#### C-j or C-m どちらかで良い。→わけではない。skkinput で C-j を使う

#### メールチェック
## autoload -U colors; colors   # ↓のために。設定してなければしておく
# MAILCHECK=300                 # 300秒毎にチェック
## MAILPATH="/var/mail$USER"    # チェックするメールボックス
# MAILPATH="/var/mail$USER?{fg[red]}New mail"   # メッセージと色を変更

## --enable-maildir-support を指定してコンパイルすればMaildir 形式でも可能
# MAILPATH="$HOME/Maildir?{fg_bold[red]}New mail in $_" # 「$_」は変更されたfile
## : で区切れば複数のメールスプールをチェックできる
# MAILPATH="$HOME/Maildir?{fg_bold[red]}New mail in $_:$HOME/Maildir-foo?{fg_bold[green]}New mail in $_:"

############################################################
# 環境変数は主に ~/.zshenv に記述
# ~/.zshrc に記述するのは、インタラクティブシェルとしての設定

if [ $TERM = "screen"  ] || [ $SCREEN = 1 ]; then
	stty erase "^?"
fi

autoload -U colors; colors      # ${fg[red]}形式のカラー書式を有効化

hosts=( localhost `hostname` )
#printers=( lw ph clw )
umask 002
cdpath=( ~ )                    # cd のサーチパス

# for zsh-completions
typeset -U path cdpath fpath manpath  # パスの重複を省く指定
path=(/usr/local/bin(N-/) /bin(N-/) /usr/sbin(N-/) /sbin(N-/) /usr/bin(N-/) ${path})
export PATH 
fpath=(/usr/local/share/zsh-completions(N-/) ${fpath})

# カレントディレクトリに候補がない場合のみ cdpath 上のディレクトリを候補
zstyle ':completion:*:cd:*' tag-order local-directories path-directories
# cf. zstyle ':completion:*:path-directories' hidden true
# cf. cdpath 上のディレクトリは補完候補から外れる

## 補完時に大小文字を区別しない
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

#### history
HISTFILE="$HOME/.zhistory"      # 履歴ファイル
HISTSIZE=10000           # メモリ上に保存される $HISTFILE の最大サイズ？
SAVEHIST=100000                  # 保存される最大履歴数

#### option, limit, bindkey
setopt extended_history         # コマンドの開始時刻と経過時間を登録
setopt hist_ignore_dups         # 直前のコマンドと同一ならば登録しない
setopt hist_ignore_all_dups     # 登録済コマンド行は古い方を削除
setopt hist_reduce_blanks # 余分な空白は詰めて登録(空白数違い登録を防ぐ)
#setopt append_history  # zsh を終了させた順にファイルに記録(デフォルト)
#setopt inc_append_history # 同上、ただしコマンドを入力した時点で記録
setopt share_history    # ヒストリの共有。(append系と異なり再読み込み不要、これを設定すれば append 系は不要)
setopt hist_no_store            # historyコマンドは登録しない
setopt hist_ignore_space # コマンド行先頭が空白の時登録しない(直後ならば呼べる)


setopt list_packed              # 補完候補リストを詰めて表示
setopt print_eight_bit          # 補完候補リストの日本語を適正表示
#setopt menu_complete  # 1回目のTAB で補完候補を挿入。表示だけの方が好き
setopt no_clobber               # 上書きリダイレクトの禁止
setopt no_unset                 # 未定義変数の使用の禁止
setopt no_hup                   # logout時にバックグラウンドジョブを kill しない
setopt no_beep                  # コマンド入力エラーでBEEPを鳴らさない

setopt extended_glob            # 拡張グロブ
setopt numeric_glob_sort        # 数字を数値と解釈して昇順ソートで出力
setopt correct                  # スペルミス補完
setopt no_checkjobs             # exit 時にバックグラウンドジョブを確認しない
#setopt ignore_eof              # C-dでlogoutしない(C-dを補完で使う人用)
setopt pushd_to_home        # 引数なしpushdで$HOMEに戻る(直前dirへは cd - で)
setopt pushd_ignore_dups        # ディレクトリスタックに重複する物は古い方を削除
#setopt pushd_silent   # pushd, popd の度にディレクトリスタックの中身を表示しない
setopt auto_cd # ディレクトリ名だけでcdする
setopt interactive_comments     # コマンド入力中のコメントを認める
#setopt rm_star_silent          # rm * で本当に良いか聞かずに実行
#setopt rm_star_wait            # rm * の時に 10秒間何もしない
#setopt chase_links             # リンク先のパスに変換してから実行。
# setopt sun_keyboard_hack      # SUNキーボードでの頻出 typo ` をカバーする

setopt auto_pushd # cd したら自動的にpushdする


setopt hist_save_nodups # ヒストリファイルに保存するとき、すでに重複したコマンドがあったら古い方を削除する
setopt hist_reduce_blanks # ヒストリに保存するときに余分なスペースを削除する

setopt auto_menu # 補完候補が複数あるときに自動的に一覧表示する
 

setopt print_eight_bit # 日本語ファイル名を表示可能にする
 
# フローコントロールを無効にする
setopt no_flow_control
 
# 色を使用出来るようにする
autoload -Uz colors
colors

limit   coredumpsize    0       # コアファイルを吐かないようにする

stty    erase   '^H'
stty    intr    '^C'
stty    susp    '^Z'

#### bindkey
# bindkey "割当てたいキー" 実行させる機能の名前
bindkey -e    # emacs 風キーバインド(環境変数 EDITOR も反映するが、こっちが優先)
bindkey '^I'    complete-word   # complete on tab, leave expansion to _expand

bindkey '^P' history-beginning-search-backward # 先頭マッチのヒストリサーチ
bindkey '^N' history-beginning-search-forward # 先頭マッチのヒストリサーチ

# run-help が呼ばれた時、zsh の内部コマンドの場合は該当する zsh のマニュアル表示
[ -n "`alias run-help`" ] && unalias run-help
autoload run-help

#### completion
#_cache_hosts=(`perl -ne  'if (/^([a-zA-Z0-9.-]+)/) { print "$1\n";}' ~/.ssh/known_hosts`)
# ↑(_cache_hosts) ~/.ssh/known_hosts から自動的に取得する
_cache_hosts=($HOST localhost)
autoload -U compinit; compinit -u
compdef _tex platex             # platex に .tex を


############################################################
## プロンプト設定
#unsetopt promptcr       # 改行のない出力をプロンプトで上書きするのを防ぐ
#setopt prompt_subst             # ESCエスケープを有効にする

if [ $TERM = "screen" ] || [ $SCREEN = 1 ]; then
	stty erase "^?"
fi

#if [ $TERM = "kterm-color" ] || [ $TERM = "xterm" ]; then
#if [ $COLORTERM = 1 ]; then
#  if [ $UID = 0 ] ; then 
#    PSCOLOR='00;04;31'  # 細字;下線;赤
#  else
#    PSCOLOR='00;04;32'  # 細字;下線;緑
#  fi
##    RPROMPT=$'%{\e[${PSCOLOR}m%}[%~]%{\e[00m%}'        # 右プロンプト
#  RPS1=$'%{\e[${PSCOLOR}m%}[%~]%{\e[00m%}'      # 右プロンプト
#  PS1=$'%{\e]2; %m:%~ \a'$'\e]1;%%: %~\a%}'$'\n%{\e[${PSCOLOR}m%}%n@%m ${WINDOW:+"[$WINDOW]"}%#%{\e[00m%} '
#fi
# 1個目の $'...' は 「\e]2;「kterm のタイトル」\a」
# 2個目の $'...' は 「\e]1;「アイコンのタイトル」\a」
# 3個目の $'...' がプロンプト

# \e を ESC コード()縺ァ鄂ョ縺丞ソヲ√′縺ゅｋ縺九ｂ
# emacs 、ヌ、マ C-q ESC, vi 、ヌ、マ C-v ESC 、ヌニ呂垢#       \e[00m  初期状態へ
#       \e[01m  太字     (0は省略可能っぽい)
#       \e[04m  アンダーライン
#       \e[05m  blink(太字)
#       \e[07m  反転
#       \e[3?m  文字色をかえる
#       \e[4?m  背景色をかえる
#               ?= 0:黒, 1:赤, 2:緑, 3:黄, 4:青, 5:紫, 6:空, 7:白

############################################################
## alias & function

#### PAGER
alias less="$PAGER"
alias m="$PAGER"
alias -g L="| $PAGER"
alias -g M="| $PAGER"
alias les="less"        # for typo

#### ps
if [ $ARCHI = "irix" ]; then
  alias psa='ps -ef'
else; 
  alias psa='ps auxw'
fi
function pst() {                # CPU 使用率の高い方から8つ
  psa | head -n 1
  psa | sort -r -n +2 | grep -v "ps -auxww" | grep -v grep | head -n 8
}
function psm() {                # メモリ占有率の高い方から8つ
  psa | head -n 1
  psa | sort -r -n +3 | grep -v "ps -auxww" | grep -v grep | head -n 8
}
function psg() {
  psa | head -n 1
  psa | grep $* | grep -v "ps -auxww" | grep -v grep
}

#### ls
#### dircolor
if [ -x `where gnuls` ]; then
  alias ls="gnuls -F --color=auto --show-control-char"
  alias lscolor='gnuls -F --color=always --show-control-char'
  # 補完リストをカラー化
  zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
  #zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS} でも良さげ
elif [ $ARCHI = "linux" ]; then
  alias ls="ls -F --color=auto --show-control-char"
  alias lscolor='ls -F --color=always --show-control-char'
  # 補完リストをカラー化
  zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
else
fi
alias kls='ls'
alias qls='ls' # Shift-PageUp を抜けるのについ q を打ってしまうのを回避
alias sl='ls'
alias s='ls'
alias lf='ls'
alias l='ls'
alias la='ls -a'
alias ll='ls -al'
function lsl() { lscolor $* | less }
function lll() { lscolor -la $* | less }

#### command
alias du='du -k'
alias mv='mv -iv'
#alias  memo    'skkfep -viesc -e jvim3 ~/memo.txt'
function kterm() { /usr/X11R6/bin/kterm -sb -sl 500 -km euc -title kterm@$HOST $* & }
function mlterm() { /usr/X11R6/bin/mlterm $* & }
#alias mnews='mnews -m'
alias xcalc='xcalc &'
alias xterm='xterm &'
alias w3m='w3m -X'
alias xinit='ssh-agent xinit'
alias bell="echo '\a'"
alias scr="screen -R"
alias view="vim -R"

# short name
alias h='head'
alias t='tail'
alias g='grep'
alias c='cat'
alias j='jobs'
#alias w='wc'   w は w のまま使う。

## global alias
alias -g H='| head'
alias -g T='| tail'
alias -g G='| grep'
alias -g C='| cat -n'
alias -g W='| wc'
#alias -g S='| sed'
#alias -g A='| awk'
alias -g ....='../..'

function cd() { builtin cd $@ && ls; }
alias cd..='cd ..'
alias cd../='cd ..'
function gv() { command gv $* & }
function hgrep() { history | grep $@ }

#iwakami wrote grep via satoru takabayashif
function grep { command grep --color=tty "$@" }
function dola { command docker ps -l -q } 

function rm() {
  if [ -d ~/.trash ]; then
    local DATE=`date "+%y%m%d-%H%M%S"`
    mkdir ~/.trash/$DATE
    for i in $@; do
      # 対象が ~/.trash/ 以下なファイルならば /bin/rm を呼び出したいな
      if [ -e $i ]; then
        mv $i ~/.trash/$DATE/
      else 
        echo "$i : not found"
      fi
    done
  else
    /bin/rm -i $@
  fi
}

function euc() {                # 文字コードを euc-jp に変換
  for i in $@; do;
    nkf -e -Lu $i >! /tmp/euc.$$ # -Lu :改行を LF にする
    mv -f /tmp/euc.$$ $i
  done;
}

function sjis() {               # 文字コードを shift-jis に変換
  for i in $@; do;
    nkf -s -Lw $i >! /tmp/euc.$$ # -Lu :改行を CRLF にする
    mv -f /tmp/euc.$$ $i
  done;
}

#### time
REPORTTIME=8                    # CPUを8秒以上使った時は time を表示
TIMEFMT="\
    The name of this job.             :%J
    CPU seconds spent in user mode.   :%U
    CPU seconds spent in kernel mode. :%S
    Elapsed time in seconds.          :%E
    The  CPU percentage.              :%P"


############################################################
## 個人情報を含む設定
if [ -e ~/.zshrc_private ]; then
  source ~/.zshrc_private
fi
#### end of ~ippei/.zshrc #########################################

