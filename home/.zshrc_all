autoload -U zmv
alias mmv='noglob zmv -W'  # 引数のクォートも面倒なので
# % mmv *.c.org org/*.c

zstyle ':completion:*' use-compctl false # compctl形式を使用しない

autoload -U colors; colors      # ${fg[red]}形式のカラー書式を有効化

hosts=( localhost `hostname` )
umask 002
cdpath=( ~ )                    # cd のサーチパス

# for zsh-completions
typeset -U path cdpath fpath manpath  # パスの重複を省く指定
path=(/usr/local/bin(N-/) /bin(N-/) /usr/sbin(N-/) /sbin(N-/) /usr/bin(N-/) ${path})
export PATH
fpath=(/usr/local/share/zsh-completions $fpath)


zstyle ':completion:*:cd:*' tag-order local-directories path-directories

## 補完時に大小文字を区別しない
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

#### history
HISTFILE="$HOME/.zhistory"      # 履歴ファイル
HISTSIZE=100000           # メモリ上に保存される $HISTFILE の最大サイズ？
SAVEHIST=1000000                  # 保存される最大履歴数

#### option, limit, bindkey
setopt extended_history         # コマンドの開始時刻と経過時間を登録
setopt hist_ignore_dups         # 直前のコマンドと同一ならば登録しない
setopt hist_ignore_all_dups     # 登録済コマンド行は古い方を削除
setopt hist_reduce_blanks # 余分な空白は詰めて登録(空白数違い登録を防ぐ)
setopt share_history    # ヒストリの共有。(append系と異なり再読み込み不要、これを設定すれば append 系は不要)
setopt hist_no_store            # historyコマンドは登録しない
setopt hist_ignore_space # コマンド行先頭が空白の時登録しない(直後ならば呼べる)


setopt list_packed              # 補完候補リストを詰めて表示
setopt print_eight_bit          # 補完候補リストの日本語を適正表示
#setopt menu_complete  # 1回目のTAB で補完候補を挿入。表示だけの方が好き
setopt no_clobber               # 上書きリダイレクトの禁止
setopt no_unset                 # 未定義変数の使用の禁止
setopt no_hup                   # logout時にバックグラウンドジョブを kill しない
setopt no_beep                  # コマンド入力エラーでBEEPを鳴らさない

setopt extended_glob            # 拡張グロブ
setopt numeric_glob_sort        # 数字を数値と解釈して昇順ソートで出力
setopt correct                  # スペルミス補完
setopt no_checkjobs             # exit 時にバックグラウンドジョブを確認しない
#setopt ignore_eof              # C-dでlogoutしない(C-dを補完で使う人用)
setopt pushd_to_home        # 引数なしpushdで$HOMEに戻る(直前dirへは cd - で)
setopt pushd_ignore_dups        # ディレクトリスタックに重複する物は古い方を削除
#setopt pushd_silent   # pushd, popd の度にディレクトリスタックの中身を表示しない
setopt auto_cd # ディレクトリ名だけでcdする
setopt interactive_comments     # コマンド入力中のコメントを認める
#setopt rm_star_silent          # rm * で本当に良いか聞かずに実行
#setopt rm_star_wait            # rm * の時に 10秒間何もしない
#setopt chase_links             # リンク先のパスに変換してから実行。
# setopt sun_keyboard_hack      # SUNキーボードでの頻出 typo ` をカバーする

setopt auto_pushd # cd したら自動的にpushdする


setopt hist_save_nodups # ヒストリファイルに保存するとき、すでに重複したコマンドがあったら古い方を削除する
setopt hist_reduce_blanks # ヒストリに保存するときに余分なスペースを削除する

setopt auto_menu # 補完候補が複数あるときに自動的に一覧表示する


setopt print_eight_bit # 日本語ファイル名を表示可能にする

# フローコントロールを無効にする
setopt no_flow_control

# 色を使用出来るようにする
autoload -Uz colors
colors

limit   coredumpsize    0       # コアファイルを吐かないようにする

stty    erase   '^H'
stty    intr    '^C'
stty    susp    '^Z'

#### bindkey
bindkey -e    # emacs 風キーバインド(環境変数 EDITOR も反映するが、こっちが優先)
bindkey '^I'   complete-word   # complete on tab, leave expansion to _expand

bindkey '^P' history-beginning-search-backward # 先頭マッチのヒストリサーチ
bindkey '^N' history-beginning-search-forward # 先頭マッチのヒストリサーチ

# run-help が呼ばれた時、zsh の内部コマンドの場合は該当する zsh のマニュアル表示
[ -n "`alias run-help`" ] && unalias run-help
autoload run-help

#### completion
#_cache_hosts=(`perl -ne  'if (/^([a-zA-Z0-9.-]+)/) { print "$1\n";}' ~/.ssh/known_hosts`)
# ↑(_cache_hosts) ~/.ssh/known_hosts から自動的に取得する
_cache_hosts=($HOST localhost)
autoload -U compinit; compinit -u


# for byobu tmux
if [ $TERM = "screen" ]; then # || [ $SCREEN = 1 ]; then
	stty erase "^?"
fi

############################################################
## alias & function

#### PAGER
alias less="$PAGER"
#alias m="$PAGER"
alias -g L="| $PAGER"
alias -g M="| $PAGER"
alias les="less"        # for typo
alias lv="less" # TODO see if lv is not installed

#### ls
#### dircolor
ARCHI="mac"
if [ $ARCHI = "linux" ]; then
  alias ls="ls -F --color=auto --show-control-char"
  alias lscolor='ls -F --color=always --show-control-char'
  # 補完リストをカラー化
  zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
else
fi
alias kls='ls'
alias qls='ls' 
alias sl='ls'
#alias s='ls'
alias lf='ls'
alias l='ls'
alias la='ls -a'
alias ll='ls -al'

#### command
alias du='du -k'
alias mv='mv -iv'
alias w3m='w3m -X'
alias xinit='ssh-agent xinit'
alias bell="echo '\a'"

alias vi="vim "
alias view="nvim -R"
alias nw="nv -R"
alias nv="nvim"

# short name
alias h='head'
#alias t='tail'
#alias g='grep'
alias c='cat'
#alias j='jobs'
alias v="nvim -R"
alias cl="clear"

## global alias
alias -g H='| head'
alias -g T='| tail'
alias -g G='| grep'
alias -g C='| cat -n'
alias -g W='| wc'
#alias -g S='| sed'
#alias -g A='| awk'
alias -g ....='../..'

function cd() { builtin cd $@ && ls; }
alias cd..='cd ..'
alias cd../='cd ..'

function hgrep() { history | grep $@ }
function grep { command grep --color=tty "$@" }

# git
alias dev="git checkout develop"
alias master="git checkout master"
alias main="git checkout main"
alias staging="git checkout staging"
alias gitbpradd="gitb pr add -b develop"
alias git-ammend="git commit --amend"
alias git-ca="git commit -a "
alias co="git checkout"
alias pl="git pull"
alias prview="gh pr view --web"
alias prcreate="gh pr create --web"
alias repoview="gh repo view --web"
alias ghash="git rev-list HEAD H -1"

function git-propen2() { # by laiso http://qiita.com/laiso/items/8a30e3656c980863ccfa
	local current_branch_name=$(git symbolic-ref --short HEAD | xargs perl -MURI::Escape -e 'print uri_escape($ARGV[0]);')
	git config --get remote.origin.url | sed -e "s/^.*[:\/]\(.*\/.*\).git$/https:\/\/github.com\/\1\//" | sed -e "s/$/pull\/${current_branch_name}/" | xargs open
}
alias git-branch-activity="${HOME}/.zsh/git-branch-activity.sh"
function taglatest { command git describe --tags --abbrev=0 }
function girep { command git grep "$@" }
function gff { command git diff "$@" }
function ammend { command git add --ammend "$@" }
function glogs { command git logs }
function gitwhere { 
   local branch=`git rev-parse --abbrev-ref HEAD` 
   if [ $branch = 'master' ] || [ $branch = 'develop' ]; then
	   return -1 
   fi
   echo $branch
}
function gitkey { command git rev-parse --abbrev-ref HEAD | python -c 'import sys; print sys.stdin.readline().split("/")[1]' }
function subbranch { command git rev-parse --abbrev-ref HEAD | python -c 'import sys; print sys.stdin.readline().split("/")[1]' }
function wpe { command git commit -a "$@" -m `git rev-parse --abbrev-ref HEAD | python -c 'import sys; print sys.stdin.readline().split("/")[1]'` && git ammend }
function wpee { command git commit -a "$@" -m `git rev-parse --abbrev-ref HEAD` && git ammend }
function fixtest { command git commit -a "$@" -m "`gitkey` fix tests" }
function cleanup { command git commit -a "$@" -m "`gitkey` cleanup" }
function gitbranch5 { command git branch --sort=authordate | tail -25 }

# doccker shortcut
function dola { command docker ps -l -q }
alias doc="docker "
alias dops="docker ps"
alias dorun="docker run"
alias dostop="docker stop"
alias doimage="docker images"
alias dc="docker-compose"
alias dcup="docker-compose up"
alias dcdown="docker-compose down"
alias dm="docker-machine"
alias dmstart="docker-machine start"
alias dmstop="docker-machine stop"
function dmip { echo $(docker-machine ip) }

function jsurl { curl -H "application/json" $@ }

function rm() {
  if [ -d ~/.trash ]; then
    local DATE=`date "+%y%m%d-%H%M%S"`
    mkdir ~/.trash/$DATE
    for i in $@; do
      if [ -e $i ]; then
        mv $i ~/.trash/$DATE/
      else
        echo "$i : not found"
      fi
    done
  else
    /bin/rm -i $@
  fi
}

#### time
REPORTTIME=20
TIMEFMT="\
    The name of this job.             :%J
    CPU seconds spent in user mode.   :%U
    CPU seconds spent in kernel mode. :%S
    Elapsed time in seconds.          :%E
    The  CPU percentage.              :%P"

# zaw
ZAW_EDITOR=nvim
source ~/.zsh/zaw/zaw.zsh

[ -n "`alias history`" ] && unalias history # for ohmyzsh

# bindkey '^[r' zaw-history
bindkey '^[o' zaw-git-files
bindkey '^[e' zaw-open-file
#bindkey '^[b' zaw-recent-branches-file
#bindkey '^[B' zaw-branches-file
#
#

function peco-git-files { 
   nvim $(git ls-files | fzf)
}
zle -N peco-git-files
bindkey '^[g' peco-git-files

function peco-select-history() {
	local tac
	if which tac > /dev/null; then
		tac="tac"
	else
		tac="tail -r"
	fi
	BUFFER=$(history -n 1 | \
		eval $tac | fzf)
#		peco --query "$LBUFFER")
	CURSOR=$#BUFFER
	#zle clear-screen
}
zle -N peco-select-history
#bindkey '^[r' peco-select-history
export FZF_CTRL_R_OPTS= # to enable ^R
export FZF_DEFAULT_OPTS= # to enable ^R
bindkey '^[r' peco-select-history

# config go and ghq
# go get github.com/motemen/ghq
# git config --global ghq.root ~/Devel/src
#export PATH="/opt/go116/bin:$PATH"
export GOROOT="/usr/local/Cellar/go/1.20.5/libexec"
#export GOROOT=`go env GOROOT`
export GOPATH="${HOME}/Devel/go"
pecoo() { fzf | while read LINE; do $@ $LINE; done }

# alias o='git ls-files | p open'
# cargo install --git https://github.com/serinuntius/pacifica.git
alias ghqj='PACIFICA_PATH=/Users/takuya.iwakami/Devel pacifica | pecoo cd'
# ghq is too slow alias ghqj='ghq list -p | pecoo cd'
alias coj='gitbranch5 | pecoo git checkout'
alias sshj='ssh `ls -1 ${HOME}/ssh/* | pecoo cat`'
alias gsw='git switch -'
alias resethard='git reset --hard'

alias gr="go run internal/main.go"
alias vet="go vet ./..."
alias t="task"
alias tt="task || task precommit"
alias precommit="task precommit"
alias nr='npm run start'
alias tidy="go mod tidy"
function start() {
  if [ -e internal/main.go ]; then
    go run internal/main.go  
  elif [ -e bin/rails ]; then
    ./bin/rails server
  elif [ -e package.json ]; then
    npm run start 
  fi
}

if [ -e ~/.zsh/ghq.zsh ]; then
  source ~/.zsh/ghq.zsh
fi

if [ -e ~/.zsh/.zshrc_private ]; then
  source ~/.zsh/.zshrc_private
fi

if [ -e ~/.zshenv ]; then
  source ~/.zshenv
fi

# for rbenv
# rbenv install 2.1.0
# rbenv global 2.1.0
eval "$(rbenv init -)"

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
# export SDKMAN_DIR="/Users/takuya.iwakami/sdkman"
# [[ -s "/Users/takuya.iwakami/sdkman/bin/sdkman-init.sh" ]] && source "/Users/takuya.iwakami/sdkman/bin/sdkman-init.sh"
#
export PATH=$HOME/.nodebrew/current/bin:$PATH


eval "$(direnv hook zsh)"

